import 'react-i18next';

// Define namespace for TypeScript to recognize i18n type definitions
declare module 'react-i18next' {
  interface CustomTypeOptions {
    resources: {
      translation: {
        common: {
          language: string;
          english: string;
          chinese: string;
          save: string;
          cancel: string;
          delete: string;
          edit: string;
          add: string;
          search: string;
          confirm: string;
          submit: string;
          create: string;
          error: string;
          success: string;
          update: string;
          close: string;
          import: string;
        };
        sidebar: {
          commandStream: string;
          connectionManagement: string;
          sqlCommandManage: string;
          commandDiff: string;
          dbConfigEditor: string;
        };
        commandStream: {
          title: string;
          run: string;
          clear: string;
          history: string;
          noCommands: string;
          enterCommand: string;
          output: string;
          addEmpty: string;
          importJson: string;
          newCommandStream: string;
          streamName: string;
          enterName: string;
          importCommandStream: string;
          pasteJson: string;
          import: string;
          exportCommandStream: string;
          copySuccess: string;
          importSuccess: string;
          invalidJson: string;
          exportAsJson: string;
          selectServer: string;
          selectDatabase: string;
          fillParameters: string;
          connectionValidationFailed: string;
          unexpectedError: string;
          confirmContinue: string;
          confirmMessage: string;
          yes: string;
          no: string;
          currentRules: string;
          save: string;
          edit: string;
          newRule: string;
          noRules: string;
          ruleName: string;
          selectType: string;
          stringEqual: string;
          regex: string;
          enterPattern: string;
          addNewRule: string;
          parameters: string;
          name: string;
          value: string;
          plain: string;
          formerOutput: string;
          serverInfo: string;
          databaseInfo: string;
          enterValue: string;
          selectValue: string;
          field: string;
          ip: string;
          port: string;
          username: string;
          password: string;
          enterValueError: string;
          selectCommandError: string;
          selectFieldError: string;
          selectServerFirst: string;
          selectDatabaseFirst: string;
          fillRequiredParams: string;
          editName: string;
          editCommand: string;
          confirmRun: string;
          commandPreview: string;
          runCommand: string;
          checkRules: string;
          checkRulesFailed: string;
          checkRulesPassed: string;
          running: string;
          failed: string;
          success: string;
          invalidRegex: string;
          // Additional translations for CommandDetail.tsx
          command: string;
          enterCommandPlaceholder: string;
          cancel: string;
          pleaseCompleteParams: string;
          commandOutputFailed: string;
          preview: string;
          confirmExecution: string;
          confirmExecutionMessage: string;
          serverConnection: string;
          noServerSelected: string;
          databaseConnection: string;
          noDatabaseSelected: string;
          commandExecutionResult: string;
          noOutput: string;
          // Additional translations for GlobalControlToolBar.tsx
          mentionBeforeNext: string;
          addCommandAfter: string;
          dragToReorder: string;
          deleteCommand: string;
          commandName: string;
          commandString: string;
          // Additional translations for CheckRulesTable.tsx
          failedCheckRules: string;
          expected: string;
          text: string;
          pattern: string;
          // Additional translations for CommandStreamControlPanel.tsx
          commandStreamControlPanel: string;
          runAllCommands: string;
          // Additional translations for CommandStreamSidebar.tsx
          commandStreamList: string;
          // Additional translations for PlaceholderTable.tsx
          placeholderTable: string;
          // Additional translations for GlobalControlToolBar.tsx
          manageCommands: string;
          noCommandsInStream: string;
          addFirstCommand: string;
          saveChanges: string;
          done: string;
          selectServerShort: string;
          selectDatabaseShort: string;
          discardChangesConfirm: string;
        };
        connection: {
          title: string;
          description: string;
          newConnection: string;
          editConnection: string;
          deleteConnection: string;
          name: string;
          host: string;
          port: string;
          username: string;
          password: string;
          databaseName: string;
          testConnection: string;
          connectionSuccess: string;
          connectionFailed: string;
          type: string;
          selectType: string;
          server: string;
          database: string;
          importExport: string;
          exportAll: string;
          importAll: string;
          importSingle: string;
          addConnection: string;
          ip: string;
          noConnectionsFound: string;
          confirmDeletion: string;
          deleteConfirmMessage: string;
          exportData: string;
          jsonData: string;
          copyToClipboard: string;
          importSingleConnection: string;
          importAllConnections: string;
          pasteJsonData: string;
          importSingleSuccess: string;
          importAllSuccess: string;
          importError: string;
          connectionCopied: string;
          jsonCopied: string;
        };
        sqlManagement: {
          title: string;
          description: string;
          newQuery: string;
          saveQuery: string;
          executeQuery: string;
          queryName: string;
          queryDescription: string;
          results: string;
          noResults: string;
          savedQueries: string;
          search: string;
          allTypes: string;
          commands: string;
          importExport: string;
          exportAll: string;
          importAll: string;
          importSingle: string;
          addSql: string;
          addCommand: string;
          noSqlFound: string;
          noCommandFound: string;
          confirmDeletion: string;
          deleteConfirmMessage: string;
          exportData: string;
          jsonData: string;
          copyToClipboard: string;
          close: string;
          importSingleItem: string;
          importAllItems: string;
          pasteJsonData: string;
          import: string;
          cancel: string;
          commandCopied: string;
          jsonCopied: string;
          importSingleSuccess: string;
          importAllSuccess: string;
          importError: string;
          editSqlCommand: string;
          addNewSqlCommand: string;
          type: string;
          selectType: string;
          sql: string;
          command: string;
          name: string;
          databaseType: string;
          databaseTypePlaceholder: string;
          content: string;
          sqlOrCommandDescription: string;
          enterSqlQuery: string;
          enterCommand: string;
          enterDescription: string;
          saveChanges: string;
          add: string;
        };
        commandDiff: {
          title: string;
          original: string;
          modified: string;
          compare: string;
          noDifference: string;
          selectCommands: string;
          command: string;
          placeholders: string;
          noPlaceholders: string;
          valueFor: string;
          edit: string;
          preview: string;
          execute: string;
          executing: string;
          error: string;
          diffView: string;
          input: string;
          output: string;
          commandPreview: string;
          commandPreviewDescription: string;
          close: string;
          placeholderExample: string;
          grepExample: string;
        };
        dbConfigManager: {
          title: string;
          description: string;
          serverConnection: string;
          localSystem: string;
          savedServers: string;
          noSavedServers: string;
          enterServerManually: string;
          configFilePath: string;
          load: string;
          loading: string;
          using: string;
          useTestFile: string;
          search: string;
          priorityKeys: string;
          reset: string;
          commitChanges: string;
          backup: string;
          refresh: string;
          showingItems: string;
          itemsPerPage: string;
          previous: string;
          next: string;
          noConfigLoaded: string;
          selectServerToStart: string;
          priorityConfigKeys: string;
          enablePriorityKeys: string;
          addPriorityKey: string;
          enterKeyName: string;
          currentPriorityKeys: string;
          noPriorityKeys: string;
          done: string;
          enterServerDetails: string;
          serverIp: string;
          sshPort: string;
          username: string;
          password: string;
          cancel: string;
          connect: string;
          selectServer: string;
          // Toast messages
          noConfigToBackup: string;
          backupSuccess: string;
          noServerSelected: string;
          pleaseSelectServer: string;
          enterConfigPath: string;
          fetchConfigError: string;
          loadSuccess: string;
          noServerOrLocalMode: string;
          noChangesToCommit: string;
          updateConfigError: string;
          updateSuccess: string;
          // Table related
          tableHeaderKey: string;
          tableHeaderValue: string;
          tableHeaderActions: string;
          statusModified: string;
          statusPriority: string;
          noResultsFound: string;
          noConfigItems: string;
          edit: string;
        };
      };
    };
  }
}